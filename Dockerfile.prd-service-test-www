# Install dependencies only when needed
FROM node:lts-alpine AS deps

WORKDIR /opt/app
COPY package.json yarn.lock /opt/app/
COPY apps/service-test-www/package.json /opt/app/apps/service-test-www/package.json
RUN yarn install --frozen-lockfile

# Rebuild the source code only when needed
# This is where because may be the case that you would try
# to build the app based on some `X_TAG` in my case (Git commit hash)
# but the code hasn't changed.
FROM node:lts-alpine AS builder

ENV NODE_ENV=production
WORKDIR /opt/app
COPY . .
COPY --from=deps /opt/app/node_modules ./node_modules
COPY --from=deps /opt/app/apps/service-test-www/node_modules ./apps/service-test-www/node_modules
RUN NODE_ENV=production npx nx build service-test-www

# Production image, copy all the files and run next
FROM particle4dev/node:node-12.18.0-dumb-1.2.2 AS runner
LABEL description="This is dockerfile for building production images"

ARG X_TAG

# Set a working directory
WORKDIR /usr/src/app
ENV NODE_ENV=production

COPY --from=builder /opt/app/apps/service-test-www/package.json /usr/src/app/
COPY --from=builder /opt/app/yarn.lock /usr/src/app/
RUN npm install --production --no-progress --ignore-scripts

# Copy application files
COPY --from=builder /opt/app/dist/apps/service-test-www/ /usr/src/app
COPY --from=builder /opt/app/apps/service-test-www/server/prd.js /usr/src/app/server/prd.js
COPY --from=builder /opt/app/apps/service-test-www/package.json /usr/src/app/

CMD [ "npm", "start" ]
